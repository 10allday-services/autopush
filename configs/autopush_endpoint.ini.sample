; Endpoint node settings.
;
; Configuration names and values are the same as command line arguments
; e.g. --port=8082 would translate to a line containing
; port = 8082
;
; Likewise, you can specify configuration options as environment variables:
; PORT=8082 bin/autoendpoint
;
; Use bin/autoendpoint --help for a list of options and values.
;
;
; The public endpoint node hostname.
; hostname = updates.push.services.mozilla.com

; The port on which to listen for notifications from app servers.
port = 8082

; Uncomment to disable CORS for incoming notifications.
#no_cors

; Minimum GCM Time To Live value. Set this in case of excessive loss of
; TTL 0 messages across the GCM bridge
#gcm_ttl = 0

; AuthKey are the keys to use for Bearer Auth tokens. It uses the same
; autokey generator as the crypto_key argument, and sorted [newest, oldest]
#auth_key = [HJVPy4ZwF4Yz_JdvXTL8hRcwIhv742vC60Tg5Ycrvw8=]

; Require specific client TLS certificates for endpoint node
; connections. Specified as a JSON object formatted as follows:
;
; {<client_name>: <array of certificate sha256 signatures>}
;
; where each signature is encoded in hex with colons between each byte
; (every second digit)
; e.g.:
; {"client1": ["2C:78:31.."], "client2": ["3F:D0:E0..", "E2:19:B1.."]}
#client_certs =

; Enable a secondary port to listen for notifications with HAProxy
; Proxy Protocol handling
#proxy_protocol_port = 8083

; Amazon Device Messaging credentials
#adm_creds={"profileId":{"client_id":"...","client_secret":"..."}}

; Apple Push Notification System uses a set of certificates tied to the
; application. Since we support multiple iOS "applications" we need to support
; multiple certificates.
; apns_cert is a JSON formatted dict specifying the paths to the cert files,
; as well as any other bits of information that may be necessary. The format
; is {"platform":
;       {"cert": "path_to_cert_file",
;        "key": "path_to_key_file",
;        "topic": "com.mozilla.org.Firefox",  // Bundle ID for associated app
;        "max_connections": 100, // Max number of connection pool entries.
;        "sandbox": False,  // Use the APNs sandbox feature
;        "max_retry": 2, // Max number of retries in event of an HTTP2 error
;        },
;       ...
; }
; e.g {"firefox":{"cert":"certs/main.cert","key":"certs/main.key","topic":"com.mozilla.org.Firefox","max_retry":2},"beta":{"cert":"certs/beta.cert","key":"certs/beta.key","topic":"com.mozilla.org.FirefoxBeta"}}
#apns_creds =

; Google Cloud Messaging (GCM) bridge support.
; *NOTE*: GCM is deprecated by Google.
; Default hash of senderids and associated authorization keys.
; The list is specified as a JSON object formatted as:
; {<senderid> :{"auth": <auth_value>}}
; e.g.
; {"12345": {"auth": "abcd_efg"}, "01357": {"auth": "ZYX=abc"}}
#senderid_list =

; Google Firebase Cloud Messaging (FCM)
;  There are two APIs available for FCM, the older Legacy(0) and the newer HTTP v1 (1). Both are
;  functionally equivalent, but use different methods to authenticate. Only one form is allowed
;  at a time.
;  Legacy uses "senderid" as the auth token, v1 uses a credential file. You are encouraged to use
;  `v1`.
# fcm_version = 1
;  Common FCM flags:
# fcm_ttl = 60
# fcm_dryrun
# fcm_collapsekey=simplepush
;  The following are credential definitions for `v1`.
;  They're specified as
;  `"profile_name": {"projectid": "project-id-nane", "auth": "path/to/auth.json"`
;  See https://autopush.readthedocs.io/en/latest/http.html#push-service-bridge-http-interface for
;  details.
# fcm_creds={"dev": {"projectid": "fir-bridgetest", "auth": "keys/fir-bridgetest-123abc.json"}}
