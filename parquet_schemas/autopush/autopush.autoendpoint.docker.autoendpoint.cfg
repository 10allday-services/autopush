-- vim:ft=lua
message_matcher = "(Type == 'autopush.autoendpoint.docker.autoendpoint' || Type == 'autopush.autopush.docker.autopush')"
message_matcher = message_matcher .. " && (Fields[Fields.message] == 'Successful delivery' || Fields[Fields.message] == 'Router miss, message stored.' || Fields[Fields.message] == 'Request timings'"
message_matcher = message_matcher .. " || Fields[Fields.message] == 'hello' || Fields[Fields.message] == 'Register' || Fields[Fields.message] == 'Unregister' || Fields[Fields.message] == 'Ack' || Fields[Fields.message] == 'Nack')"

s3_path_dimensions = {
	{name="log", source="Type"},
	{name="date", source="Fields[Date]"},
	{name="hour", source="Fields[Hour]"},
}

parquet_schema = [=[
message Log {
    required int64 Timestamp;
    optional binary Type (UTF8);
    optional binary Hostname (UTF8);
    optional binary Logger (UTF8);
    optional binary EnvVersion (UTF8);
    optional int64 Severity;
    optional int64 Pid;

    optional int64 fields_code;
    optional int64 fields_errno;
    optional binary fields_remote_ip (UTF8);
    optional binary fields_uaid_hash (UTF8);
    optional binary fields_message (UTF8);
    optional boolean fields_error;
    optional binary fields_user_agent (UTF8);
    optional binary fields_channel_id (UTF8);
    optional binary fields_jwt_aud (UTF8);
    optional binary fields_jwt_crypto_key (UTF8);
    optional binary fields_jwt_sub (UTF8);
    optional binary fields_message_id (UTF8);
    optional int64 fields_message_size;
    optional binary fields_message_source (UTF8);
    optional int64 fields_message_ttl;
    optional int64 fields_request_time;
    optional int64 fields_route_time;
    optional int64 fields_validation_time;
    optional binary fields_router_key (UTF8);
    optional int64 fields_status_code;
    optional binary fields_ua_browser_family (UTF8);
    optional binary fields_ua_browser_ver (UTF8);
    optional binary fields_ua_os_family (UTF8);
    optional binary fields_ua_os_ver (UTF8);
}
]=]
